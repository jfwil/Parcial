package edu.avanzada.parcial.vista; // Paquete que contiene la clase de la vista

import edu.avanzada.parcial.control.ControlPerro; // Importa la clase ControlPerro que maneja la lógica de negocio
import edu.avanzada.parcial.modelo.Perro; // Importa la clase Perro que representa la entidad perro
import javax.swing.*; // Importa las clases de Swing para crear la interfaz gráfica
import java.awt.*; // Importa las clases de AWT para la gestión de componentes de la interfaz
import java.awt.event.ActionEvent; // Importa ActionEvent para manejar eventos de acción
import java.awt.event.ActionListener; // Importa ActionListener para escuchar acciones en los botones
import java.util.List; // Importa la clase List para manejar listas de perros

public class InterfazPerro extends JFrame { // Declara la clase que extiende JFrame para crear la ventana principal
    private JTextField txtRaza; // Campo de texto para ingresar la raza del perro
    private JTextField txtOrigen; // Campo de texto para ingresar el origen del perro
    private JComboBox<String> cbGrupo; // ComboBox para seleccionar el grupo del perro
    private JComboBox<String> cbSeccion; // ComboBox para seleccionar la sección del perro
    private JButton btnInsertar; // Botón para insertar un nuevo perro
    private JButton btnConsultar; // Botón para consultar detalles de un perro
    private JButton btnEliminar; // Botón para eliminar un perro seleccionado
    private JButton btnModificar; // Botón para modificar los detalles de un perro
    private JButton btnLimpiar; // Botón para limpiar los campos de entrada
    private JButton btnSalir; // Botón para salir de la aplicación
    private JList<Perro> listPerros; // Lista para mostrar las razas de perros
    private DefaultListModel<Perro> listModel; // Modelo de lista para gestionar los elementos de listPerros
    private ControlPerro controlPerro; // Instancia de ControlPerro para manejar la lógica de negocio

    public InterfazPerro() { // Constructor de la clase
        controlPerro = new ControlPerro(); // Inicializa la instancia de ControlPerro
        setTitle("Gestión de Razas de Perros"); // Establece el título de la ventana
        setSize(400, 400); // Establece el tamaño de la ventana
        setDefaultCloseOperation(EXIT_ON_CLOSE); // Cierra la aplicación al cerrar la ventana
        setLayout(new FlowLayout()); // Establece el diseño de la ventana como un flujo

        txtRaza = new JTextField(15); // Crea un campo de texto para la raza con un ancho de 15 columnas
        txtOrigen = new JTextField(15); // Crea un campo de texto para el origen con un ancho de 15 columnas
        cbGrupo = new JComboBox<>(new String[]{"Grupo 1", "Grupo 2", "Grupo 3"}); // Crea un ComboBox para grupos
        cbSeccion = new JComboBox<>(new String[]{"Sección A", "Sección B", "Sección C"}); // Crea un ComboBox para secciones

        btnInsertar = new JButton("Insertar"); // Crea el botón de insertar
        btnConsultar = new JButton("Consultar"); // Crea el botón de consultar
        btnEliminar = new JButton("Eliminar"); // Crea el botón de eliminar
        btnModificar = new JButton("Modificar"); // Crea el botón de modificar
        btnLimpiar = new JButton("Limpiar"); // Crea el botón de limpiar
        btnSalir = new JButton("Salir"); // Crea el botón de salir

        listModel = new DefaultListModel<>(); // Inicializa el modelo de lista
        listPerros = new JList<>(listModel); // Crea una lista de perros usando el modelo

        // Agrega etiquetas y campos de entrada a la ventana
        add(new JLabel("Raza:")); // Agrega una etiqueta para el campo de raza
        add(txtRaza); // Agrega el campo de texto para la raza
        add(new JLabel("Origen:")); // Agrega una etiqueta para el campo de origen
        add(txtOrigen); // Agrega el campo de texto para el origen
        add(new JLabel("Grupo:")); // Agrega una etiqueta para el ComboBox de grupo
        add(cbGrupo); // Agrega el ComboBox de grupo
        add(new JLabel("Sección:")); // Agrega una etiqueta para el ComboBox de sección
        add(cbSeccion); // Agrega el ComboBox de sección
        add(btnInsertar); // Agrega el botón de insertar
        add(btnConsultar); // Agrega el botón de consultar
        add(btnEliminar); // Agrega el botón de eliminar
        add(btnModificar); // Agrega el botón de modificar
        add(btnLimpiar); // Agrega el botón de limpiar
        add(btnSalir); // Agrega el botón de salir
        add(new JScrollPane(listPerros)); // Agrega la lista de perros dentro de un JScrollPane

        // Agrega el listener para el botón de insertar
        btnInsertar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                insertarPerro(); // Llama al método para insertar un perro
            }
        });

        // Agrega el listener para el botón de consultar
        btnConsultar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                consultarPerro(); // Llama al método para consultar un perro
            }
        });

        // Agrega el listener para el botón de eliminar
        btnEliminar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                eliminarPerro(); // Llama al método para eliminar un perro
            }
        });

        // Agrega el listener para el botón de modificar
        btnModificar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modificarPerro(); // Llama al método para modificar un perro
            }
        });

        // Agrega el listener para el botón de limpiar
        btnLimpiar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                limpiarCampos(); // Llama al método para limpiar los campos de entrada
            }
        });

        // Agrega el listener para el botón de salir
        btnSalir.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                salir(); // Llama al método para salir de la aplicación
            }
        });
    }

    private void insertarPerro() { // Método para insertar un nuevo perro
        String raza = txtRaza.getText(); // Obtiene el texto del campo de raza
        String origen = txtOrigen.getText(); // Obtiene el texto del campo de origen
        String grupo = (String) cbGrupo.getSelectedItem(); // Obtiene el grupo seleccionado
        String seccion = (String) cbSeccion.getSelectedItem(); // Obtiene la sección seleccionada
        
        Perro perro = new Perro(raza, origen, grupo, seccion); // Crea un nuevo objeto Perro
        if (controlPerro.insertarPerro(perro)) { // Intenta insertar el perro en el control
            listModel.addElement(perro); // Agrega el perro al modelo de lista
            JOptionPane.showMessageDialog(this, "Perro insertado correctamente."); // Muestra un mensaje de éxito
        } else {
            JOptionPane.showMessageDialog(this, "Error: Perro ya existe."); // Muestra un mensaje de error
        }
    }

    private void consultarPerro() { // Método para consultar un perro por raza
        String raza = txtRaza.getText(); // Obtiene el texto del campo de raza
        Perro perro = controlPerro.consultarPerro(raza); // Consulta el perro usando el control
        if (perro != null) { // Si se encuentra el perro
            JOptionPane.showMessageDialog(this, perro); // Muestra los detalles del perro
        } else {
            JOptionPane.showMessageDialog(this, "Perro no encontrado."); // Muestra mensaje si no se encuentra
        }
    }

    private void eliminarPerro() { // Método para eliminar un perro
        Perro selectedPerro = listPerros.getSelectedValue(); // Obtiene el perro seleccionado de la lista
        if (selectedPerro != null) { // Si hay un perro seleccionado
            if (controlPerro.eliminarPerro(selectedPerro.getRaza())) { // Intenta eliminar el perro en el control
                listModel.removeElement(selectedPerro); // Elimina el perro del modelo de lista
                JOptionPane.showMessageDialog(this, "Perro eliminado."); // Muestra mensaje de éxito
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar."); // Muestra mensaje de error
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un perro para eliminar."); // Pide seleccionar un perro
        }
    }

    private void modificarPerro() { // Método para modificar un perro
        Perro selectedPerro = listPerros.getSelectedValue(); // Obtiene el perro seleccionado de la lista
        if (selectedPerro != null) { // Si hay un perro seleccionado
            String origen = txtOrigen.getText(); //
